name: CI

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@master
      with:
        buildx-version: latest
        qemu-version: latest

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Prepare host
      run: |
        sudo apt-get -qq update || true
        sudo apt-get install -y bzr
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Run checks
      run: |
        make ci

    - name: Build
      env:
        REGISTRY: kubedbci
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
      run: |
        docker login --username ${USERNAME} --password ${DOCKER_TOKEN}
        make push

  kubernetes:
    name: Kubernetes
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        cluster: [v1.12.10, v1.14.6, v1.16.3, v1.17.0]
        db: [2.0.4]
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Create Kubernetes ${{ matrix.cluster }} cluster
      id: kind
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: v0.7.0
        config: hack/kubernetes/kind.yaml
        image: kindest/node:${{ matrix.cluster }}

    - name: Prepare cluster for testing
      id: local-path
      env:
        USERNAME: 1gtm
        REGISTRY_SECRET: regcred
        GCR_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GCR_SERVICE_ACCOUNT_JSON_KEY }}
      run: |
        echo "waiting for nodes to be ready ..."
        kubectl wait --for=condition=Ready nodes --all --timeout=5m
        kubectl get nodes
        echo
        echo "install helm 3"
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        echo
        echo "create docker-registry secret"
        kubectl create secret docker-registry ${REGISTRY_SECRET} \
          --namespace=kube-system \
          --docker-server=https://gcr.io \
          --docker-username=${USERNAME} \
          --docker-email=${USERNAME}@appscode.com \
          --docker-password="$(echo $GCR_SERVICE_ACCOUNT_JSON_KEY)"

    - name: Install cert-manager
      run: |
        kubectl create namespace cert-manager
        kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml

    - name: Check out installer
      run: |
        cd ..
        git clone https://github.com/kubedb/installer.git
        cd installer
        git checkout master

    - name: Install MySQL operator
      run: |
        make install-mysql


    - name: Install Percona-XtraDB operator
      run: |
        make install-percona-xtradb

    - name: Run e2e tests
      env:
        REGISTRY: kubedbci
        REGISTRY_SECRET: regcred
        TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
        GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
      run: |
        echo "preparing test credentials"
        mkdir -p hack/config
        echo -n "$TEST_CREDENTIALS" > hack/config/.env
        echo >> hack/config/.env
        echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
        make install
        echo
        make e2e-tests GINKGO_ARGS="--flakeAttempts=2" TEST_ARGS="--proxysql-catalog=${{ matrix.db }}" || (kubectl describe deployment -n kube-system kubedb; kubectl logs -n kube-system deployment/kubedb; kubectl describe deployment -n kube-system kubedb-mysql; kubectl logs -n kube-system deployment/kubedb-mysql operator; kubectl describe deployment -n kube-system kubedb-percona-xtradb; kubectl logs -n kube-system deployment/kubedb-percona-xtradb operator; exit 1;)
