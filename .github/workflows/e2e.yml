# Usage: /ok-to-test [k8s-version] [db-version]
# Examples:
# /ok-to-test [refs/master]
# /ok-to-test [refs/master] v1.18.4 7.3.2
# /ok-to-test [refs/master] v1.18.4
# /ok-to-test [refs/master] * 7.3.2 # * means all default k8s versions

name: e2e

on:
  issue_comment:
    types: [created]

jobs:
  config:
    if: contains(github.event.issue.html_url, '/pull/') && startsWith(github.event.comment.body, '/ok-to-test')
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      e2e_ref: ${{ steps.set-matrix.outputs.e2e_ref }}
    steps:
      - uses: actions/checkout@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest

      - id: set-matrix
        name: Generate test matrix
        run: |
          k8s=(v1.12.10 v1.14.10 v1.16.9 v1.18.4 v1.19.0)
          db=(2.0.4)

          IFS=' '
          read -ra COMMENT <<< "${{ github.event.comment.body }}"

          prefix=refs/
          start=0
          e2e_ref=master
          if [[ ${COMMENT[1]} == ${prefix}* ]]; then
            start=1
            e2e_ref=${COMMENT[1]#$prefix}
          fi
          if [ ! -z ${COMMENT[$((start+1))]} ] && [ ${COMMENT[$((start+1))]} != "*" ]; then
            k8s=(${COMMENT[$((start+1))]})
          fi
          if [ ! -z ${COMMENT[$((start+2))]} ]; then
            db=(${COMMENT[$((start+2))]})
          fi

          matrix=()
          for x in ${k8s[@]}; do
              for y in ${db[@]}; do
                  matrix+=( $( jq -n -c --arg x "$x" --arg y "$y" '{"k8s":$x,"db":$y}' ) )
              done
          done

          # https://stackoverflow.com/a/63046305/244009
          function join { local IFS="$1"; shift; echo "$*"; }
          matrix=$(echo "{"include":[$(join , ${matrix[@]})]}")
          echo $matrix
          echo "::set-output name=matrix::$matrix"
          echo "::set-output name=e2e_ref::$e2e_ref"

      - name: Checkout pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          sudo mv bin/hub /usr/local/bin
          hub pr checkout $PR_NUMBER

      - name: Build
        env:
          REGISTRY: kubedbci
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          USERNAME: 1gtm
        run: |
          docker login --username ${USERNAME} --password ${DOCKER_TOKEN}
          make push

  kubernetes:
    name: Kubernetes
    needs: config
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v1

      - name: Checkout pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          sudo mv bin/hub /usr/local/bin
          hub pr checkout $PR_NUMBER

      - name: Create Kubernetes ${{ matrix.k8s }} cluster
        id: kind
        uses: engineerd/setup-kind@v0.3.0
        with:
          version: v0.8.1
          config: hack/kubernetes/kind.yaml
          image: kindest/node:${{ matrix.k8s }}

      - name: Prepare cluster for testing
        id: local-path
        env:
          USERNAME: 1gtm
          REGISTRY_SECRET: regcred
          GCR_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GCR_SERVICE_ACCOUNT_JSON_KEY }}
        run: |
          echo "waiting for nodes to be ready ..."
          kubectl wait --for=condition=Ready nodes --all --timeout=5m
          kubectl get nodes
          echo
          echo "install helm 3"
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          echo
          echo "create docker-registry secret"
          kubectl create secret docker-registry ${REGISTRY_SECRET} \
            --namespace=kube-system \
            --docker-server=https://gcr.io \
            --docker-username=_json_key \
            --docker-email=${USERNAME}@appscode.com \
            --docker-password="$(echo $GCR_SERVICE_ACCOUNT_JSON_KEY)"

      - name: Install cert-manager
        run: |
          kubectl create namespace cert-manager
          # ref: https://github.com/cloudflare/semver_bash/blob/master/semver.sh#L3
          RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
          eval MAJOR=`echo ${{ matrix.k8s }} | sed -e "s#$RE#\1#"`
          eval MINOR=`echo ${{ matrix.k8s }} | sed -e "s#$RE#\2#"`
          if [ $MAJOR -eq 1 ] && [ $MINOR -lt 15 ]; then
            kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.1/cert-manager-legacy.yaml
          else
            kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.1/cert-manager.yaml
          fi

      - name: Check out installer
        run: |
          cd ..
          git clone https://github.com/kubedb/installer.git
          cd installer
          git checkout master

      - name: Install MySQL operator
        run: |
          make install-mysql

      - name: Install Percona-XtraDB operator
        run: |
          make install-percona-xtradb

      - name: Run e2e tests
        env:
          REGISTRY: kubedbci
          REGISTRY_SECRET: regcred
          TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
          GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
        run: |
          cd ..
          git clone https://github.com/kubedb/tests.git
          cd tests
          git checkout ${{ needs.config.outputs.e2e_ref }}
          echo "preparing test credentials"
          mkdir -p hack/config
          echo -n "$TEST_CREDENTIALS" > hack/config/.env
          echo >> hack/config/.env
          echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
          make install
          echo
          make e2e-tests GINKGO_ARGS="--flakeAttempts=2" TEST_ARGS="--proxysql-catalog=${{ matrix.db }}" || (kubectl describe deployment -n kube-system kubedb; kubectl logs -n kube-system deployment/kubedb; kubectl describe deployment -n kube-system kubedb-mysql; kubectl logs -n kube-system deployment/kubedb-mysql operator; kubectl describe deployment -n kube-system kubedb-percona-xtradb; kubectl logs -n kube-system deployment/kubedb-percona-xtradb operator; exit 1;)
