/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VerticalAutoscalerLister helps list VerticalAutoscalers.
type VerticalAutoscalerLister interface {
	// List lists all VerticalAutoscalers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscaler, err error)
	// VerticalAutoscalers returns an object that can list and get VerticalAutoscalers.
	VerticalAutoscalers(namespace string) VerticalAutoscalerNamespaceLister
	VerticalAutoscalerListerExpansion
}

// verticalAutoscalerLister implements the VerticalAutoscalerLister interface.
type verticalAutoscalerLister struct {
	indexer cache.Indexer
}

// NewVerticalAutoscalerLister returns a new VerticalAutoscalerLister.
func NewVerticalAutoscalerLister(indexer cache.Indexer) VerticalAutoscalerLister {
	return &verticalAutoscalerLister{indexer: indexer}
}

// List lists all VerticalAutoscalers in the indexer.
func (s *verticalAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VerticalAutoscaler))
	})
	return ret, err
}

// VerticalAutoscalers returns an object that can list and get VerticalAutoscalers.
func (s *verticalAutoscalerLister) VerticalAutoscalers(namespace string) VerticalAutoscalerNamespaceLister {
	return verticalAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VerticalAutoscalerNamespaceLister helps list and get VerticalAutoscalers.
type VerticalAutoscalerNamespaceLister interface {
	// List lists all VerticalAutoscalers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscaler, err error)
	// Get retrieves the VerticalAutoscaler from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VerticalAutoscaler, error)
	VerticalAutoscalerNamespaceListerExpansion
}

// verticalAutoscalerNamespaceLister implements the VerticalAutoscalerNamespaceLister
// interface.
type verticalAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VerticalAutoscalers in the indexer for a given namespace.
func (s verticalAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VerticalAutoscaler))
	})
	return ret, err
}

// Get retrieves the VerticalAutoscaler from the indexer for a given namespace and name.
func (s verticalAutoscalerNamespaceLister) Get(name string) (*v1alpha1.VerticalAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("verticalautoscaler"), name)
	}
	return obj.(*v1alpha1.VerticalAutoscaler), nil
}
