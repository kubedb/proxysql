/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VerticalAutoscalerCheckpointLister helps list VerticalAutoscalerCheckpoints.
type VerticalAutoscalerCheckpointLister interface {
	// List lists all VerticalAutoscalerCheckpoints in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscalerCheckpoint, err error)
	// VerticalAutoscalerCheckpoints returns an object that can list and get VerticalAutoscalerCheckpoints.
	VerticalAutoscalerCheckpoints(namespace string) VerticalAutoscalerCheckpointNamespaceLister
	VerticalAutoscalerCheckpointListerExpansion
}

// verticalAutoscalerCheckpointLister implements the VerticalAutoscalerCheckpointLister interface.
type verticalAutoscalerCheckpointLister struct {
	indexer cache.Indexer
}

// NewVerticalAutoscalerCheckpointLister returns a new VerticalAutoscalerCheckpointLister.
func NewVerticalAutoscalerCheckpointLister(indexer cache.Indexer) VerticalAutoscalerCheckpointLister {
	return &verticalAutoscalerCheckpointLister{indexer: indexer}
}

// List lists all VerticalAutoscalerCheckpoints in the indexer.
func (s *verticalAutoscalerCheckpointLister) List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscalerCheckpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VerticalAutoscalerCheckpoint))
	})
	return ret, err
}

// VerticalAutoscalerCheckpoints returns an object that can list and get VerticalAutoscalerCheckpoints.
func (s *verticalAutoscalerCheckpointLister) VerticalAutoscalerCheckpoints(namespace string) VerticalAutoscalerCheckpointNamespaceLister {
	return verticalAutoscalerCheckpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VerticalAutoscalerCheckpointNamespaceLister helps list and get VerticalAutoscalerCheckpoints.
type VerticalAutoscalerCheckpointNamespaceLister interface {
	// List lists all VerticalAutoscalerCheckpoints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscalerCheckpoint, err error)
	// Get retrieves the VerticalAutoscalerCheckpoint from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VerticalAutoscalerCheckpoint, error)
	VerticalAutoscalerCheckpointNamespaceListerExpansion
}

// verticalAutoscalerCheckpointNamespaceLister implements the VerticalAutoscalerCheckpointNamespaceLister
// interface.
type verticalAutoscalerCheckpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VerticalAutoscalerCheckpoints in the indexer for a given namespace.
func (s verticalAutoscalerCheckpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VerticalAutoscalerCheckpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VerticalAutoscalerCheckpoint))
	})
	return ret, err
}

// Get retrieves the VerticalAutoscalerCheckpoint from the indexer for a given namespace and name.
func (s verticalAutoscalerCheckpointNamespaceLister) Get(name string) (*v1alpha1.VerticalAutoscalerCheckpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("verticalautoscalercheckpoint"), name)
	}
	return obj.(*v1alpha1.VerticalAutoscalerCheckpoint), nil
}
